```lua
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer

-- Debug function
local function DebugInfo(mode, content, value)
    if mode == "warn" then
        warn("[ArbixTP DEBUG]: " .. content .. (value and " " .. tostring(value) or ""))
    elseif mode == "print" then
        print("[ArbixTP DEBUG]: " .. content .. (value and " " .. tostring(value) or ""))
    end
end

DebugInfo("print", "Script started")

-- Create ScreenGui
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "ArbixTPGui"
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.IgnoreGuiInset = true
ScreenGui.DisplayOrder = 999
ScreenGui.Parent = Player:WaitForChild("PlayerGui")
DebugInfo("print", "ScreenGui created")

-- Create BlurEffect
local Blur = Instance.new("BlurEffect")
Blur.Name = "ArbixTPBlur"
Blur.Size = 0
Blur.Parent = workspace
DebugInfo("print", "BlurEffect created")

-- Create Frame
local isMobile = UserInputService.TouchEnabled
local Frame = Instance.new("Frame")
Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(10, 10, 15)
Frame.BorderSizePixel = 0
Frame.AnchorPoint = Vector2.new(0.5, 0.5)
Frame.Position = UDim2.new(0.5, 0, 0.5, 0)
local originalSize = isMobile and UDim2.new(0.5, 0, 0.35, 0) or UDim2.new(0, 350, 0, 250)
Frame.Size = UDim2.new(0, 0, 0, 0) -- Start at 0 for animation
Frame.ClipsDescendants = true
Frame.BackgroundTransparency = 1
Frame.ZIndex = 1
DebugInfo("print", "Frame created", "Mobile: " .. tostring(isMobile) .. ", Size: " .. tostring(originalSize))

-- Create UICorner for Frame
local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 12)
UICorner.Parent = Frame

-- Create TitleBar
local TitleBar = Instance.new("Frame")
TitleBar.Name = "TitleBar"
TitleBar.Parent = Frame
TitleBar.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
TitleBar.BorderSizePixel = 0
TitleBar.Size = UDim2.new(1, 0, 0, 30)
TitleBar.ZIndex = 10
DebugInfo("print", "TitleBar created")

local TitleBarCorner = Instance.new("UICorner")
TitleBarCorner.CornerRadius = UDim.new(0, 12)
TitleBarCorner.Parent = TitleBar

local TitleLabel = Instance.new("TextLabel")
TitleLabel.Name = "Title"
TitleLabel.Parent = TitleBar
TitleLabel.BackgroundTransparency = 1
TitleLabel.Size = UDim2.new(1, -60, 1, 0)
TitleLabel.Position = UDim2.new(0, 10, 0, 0)
TitleLabel.Font = Enum.Font.GothamBlack
TitleLabel.Text = "BUENARDOVICH TP"
TitleLabel.TextColor3 = Color3.fromRGB(77, 0, 255)
TitleLabel.TextSize = isMobile and 12 or 16
TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
TitleLabel.TextTransparency = 1
TitleLabel.ZIndex = 11
DebugInfo("print", "TitleLabel created")

local CloseButton = Instance.new("TextButton")
CloseButton.Name = "CloseButton"
CloseButton.Parent = TitleBar
CloseButton.BackgroundTransparency = 1
CloseButton.Position = UDim2.new(0.95, -15, 0.5, 0)
CloseButton.Size = UDim2.new(0, 20, 0, 20)
CloseButton.Font = Enum.Font.GothamBold
CloseButton.Text = "X"
CloseButton.TextColor3 = Color3.fromRGB(255, 80, 80)
CloseButton.TextSize = isMobile and 10 or 12
CloseButton.TextTransparency = 1
CloseButton.ZIndex = 11
DebugInfo("print", "CloseButton created")

-- Create Content Frame
local Content = Instance.new("Frame")
Content.Name = "Content"
Content.Parent = Frame
Content.BackgroundTransparency = 1
Content.Position = UDim2.new(0, 0, 0, 30)
Content.Size = UDim2.new(1, 0, 1, -30)
Content.Visible = true
Content.ZIndex = 5
DebugInfo("print", "Content frame created")

-- Create Test Button
local TestButton = Instance.new("TextButton")
TestButton.Name = "TestButton"
TestButton.Parent = Content
TestButton.BackgroundColor3 = Color3.fromRGB(77, 0, 255)
TestButton.TextColor3 = Color3.fromRGB(255, 255, 255)
TestButton.Position = UDim2.new(0.1, 0, 0.2, 0)
TestButton.Size = UDim2.new(0.8, 0, 0, isMobile and 30 or 40)
TestButton.Font = Enum.Font.GothamSemibold
TestButton.Text = "TEST BUTTON"
TestButton.TextSize = isMobile and 12 or 14
TestButton.TextWrapped = true
TestButton.TextTransparency = 1
TestButton.BackgroundTransparency = 1
TestButton.ZIndex = 6
DebugInfo("print", "TestButton created")

local UICorner_Button = Instance.new("UICorner")
UICorner_Button.CornerRadius = UDim.new(0, 8)
UICorner_Button.Parent = TestButton

local ButtonStroke = Instance.new("UIStroke")
ButtonStroke.Parent = TestButton
ButtonStroke.Color = Color3.fromRGB(0, 80, 200)
ButtonStroke.Thickness = 2
ButtonStroke.Transparency = 0.5

-- Initial animation
DebugInfo("print", "Starting GUI animation")
task.wait(0.1)
TweenService:Create(Blur, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Size = 15}):Play()
TweenService:Create(Frame, TweenInfo.new(0.6, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
    Size = originalSize,
    BackgroundTransparency = 0
}):Play()

task.wait(0.3)
TweenService:Create(TitleLabel, TweenInfo.new(0.4), {TextTransparency = 0}):Play()
TweenService:Create(CloseButton, TweenInfo.new(0.4), {TextTransparency = 0}):Play()

task.wait(0.2)
TweenService:Create(TestButton, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {
    TextTransparency = 0,
    BackgroundTransparency = 0
}):Play()
TweenService:Create(ButtonStroke, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {Transparency = 0}):Play()
DebugInfo("print", "GUI animation completed, TestButton should be visible")

-- Close button functionality
CloseButton.MouseButton1Click:Connect(function()
    DebugInfo("print", "Close button clicked")
    TweenService:Create(Frame, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {
        Size = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1
    }):Play()
    TweenService:Create(Blur, TweenInfo.new(0.4), {Size = 0}):Play()
    task.wait(0.4)
    ScreenGui:Destroy()
    Blur:Destroy()
    DebugInfo("print", "GUI closed")
end)

-- Test button functionality
TestButton.MouseButton1Click:Connect(function()
    DebugInfo("print", "Test button clicked")
end)

-- Dragging logic
local dragging = false
local dragStart, startPos

local function startDragging(input)
    if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
        dragging = true
        dragStart = input.Position
        startPos = Frame.Position
        DebugInfo("print", "Dragging started", input.UserInputType.Name)
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
                DebugInfo("print", "Dragging ended")
            end
        end)
    end
end

local function updateDragging(input)
    if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) and dragging then
        local delta = input.Position - dragStart
        local goal = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
        Frame:TweenPosition(goal, Enum.EasingDirection.Out, Enum.EasingStyle.Sine, 0.05, true)
    end
end

TitleBar.InputBegan:Connect(startDragging)
TitleBar.InputChanged:Connect(updateDragging)

DebugInfo("print", "Script initialization completed")
```
